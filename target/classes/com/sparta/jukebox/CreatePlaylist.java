
package com.sparta.jukebox;


import java.awt.event.*;
import javax.swing.*;
import java.util.*; 
import java.io.*;



public class CreatePlaylist extends javax.swing.JFrame {
   
    public CreatePlaylist() {
        initComponents();
        allTracksTextArea.setText(LibraryData.listAll());
        //loadAlbumCover();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        playlistTxtArea = new java.awt.TextArea();
        jLabel2 = new javax.swing.JLabel();
        trackNoTxtFld = new java.awt.TextField();
        allTracksTextArea = new java.awt.TextArea();
        clearPlaylistBtn = new javax.swing.JButton();
        checkTrackBtn = new javax.swing.JButton();
        addTrackToPlaylist = new javax.swing.JButton();
        removeSelectedTrackBtn = new javax.swing.JButton();
        exitPlaylistBtn = new javax.swing.JButton();
        selectedTrackTxtArea = new java.awt.TextArea();
        savePlaylist = new javax.swing.JButton();
        ArtistPhoto = new javax.swing.JLabel();
        playPlaylist1 = new javax.swing.JButton();
        playPlaylist2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Track Number :");

        jLabel2.setText("All Tracks");

        trackNoTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackNoTxtFldActionPerformed(evt);
            }
        });

        allTracksTextArea.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                allTracksTextAreaComponentShown(evt);
            }
        });

        clearPlaylistBtn.setText("Clear Playlist");
        clearPlaylistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPlaylistBtnActionPerformed(evt);
            }
        });

        checkTrackBtn.setText("Check track");
        checkTrackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTrackBtnActionPerformed(evt);
            }
        });

        addTrackToPlaylist.setText("Add Track to Playlist");
        addTrackToPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrackToPlaylistActionPerformed(evt);
            }
        });

        removeSelectedTrackBtn.setText("Remove Track");
        removeSelectedTrackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedTrackBtnActionPerformed(evt);
            }
        });

        exitPlaylistBtn.setText("Exit");
        exitPlaylistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitPlaylistBtnActionPerformed(evt);
            }
        });

        savePlaylist.setText("Save Playlist");
        savePlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePlaylistActionPerformed(evt);
            }
        });

        ArtistPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sparta/jukebox/images/jukebox_logo.png"))); // NOI18N
        ArtistPhoto.setText("artist-photo");

        playPlaylist1.setText("Play Playlist");
        playPlaylist1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPlaylist1ActionPerformed(evt);
            }
        });

        playPlaylist2.setText("Load Playlist");
        playPlaylist2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPlaylist2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(savePlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(playPlaylist2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(playPlaylist1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(exitPlaylistBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playlistTxtArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addTrackToPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearPlaylistBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeSelectedTrackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addComponent(selectedTrackTxtArea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(547, 547, 547))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trackNoTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(allTracksTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ArtistPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkTrackBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(allTracksTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(trackNoTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkTrackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(selectedTrackTxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addTrackToPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(removeSelectedTrackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clearPlaylistBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addComponent(playlistTxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(99, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(exitPlaylistBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(savePlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playPlaylist1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playPlaylist2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ArtistPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trackNoTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackNoTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trackNoTxtFldActionPerformed

    private void exitPlaylistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitPlaylistBtnActionPerformed
        // TODO add your handling code here:
           dispose();
    }//GEN-LAST:event_exitPlaylistBtnActionPerformed

    private void checkTrackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTrackBtnActionPerformed
        // TODO add your handling code here:
            String selectedTrackNumber = trackNoTxtFld.getText();
            
            String name = LibraryData.getName(selectedTrackNumber);
            //System.out.println(name);
            if (name == null) {
                //information.setText(" No such track number");
                //selectedTrackTxtArea.setText("No such track number");
                JOptionPane.showMessageDialog(null, "Invalid track number!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
              
                ArtistPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource(LibraryData.getImageUrl(selectedTrackNumber))));
                selectedTrackTxtArea.setText(name + " - " + LibraryData.getArtist(selectedTrackNumber));
                selectedTrackTxtArea.append("\nRating: " + displayStars(LibraryData.getRating(selectedTrackNumber)));
                selectedTrackTxtArea.append("\nPlay count: " + LibraryData.getPlayCount(selectedTrackNumber));
                
            }
      
    }//GEN-LAST:event_checkTrackBtnActionPerformed

    private void addTrackToPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrackToPlaylistActionPerformed
            // TODO add your handling code here:
            String selectedTrackNumber = trackNoTxtFld.getText();
            
            String name = LibraryData.getName(selectedTrackNumber);
            //System.out.println(name);
            if (name == null) {
                //information.setText(" No such track number");
                selectedTrackTxtArea.setText("No such track number");
            } else {
            
                playlistTxtArea.append(name + " - " + LibraryData.getArtist(selectedTrackNumber));
                playlistTxtArea.append("\nRating: " + displayStars(LibraryData.getRating(selectedTrackNumber)));
                playlistTxtArea.append("\nPlay count: " + LibraryData.getPlayCount(selectedTrackNumber));
                playlistTxtArea.append("\n - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - -  \n");
            }
    }//GEN-LAST:event_addTrackToPlaylistActionPerformed

    private void allTracksTextAreaComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_allTracksTextAreaComponentShown
        // TODO add your handling code here:
        //allTracksTextArea.setText("No tracks");
    }//GEN-LAST:event_allTracksTextAreaComponentShown

  
    private void clearPlaylistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPlaylistBtnActionPerformed
        // TODO add your handling code here:
        //String selectedTrackNumber = trackNoTxtFld.getText();
        ArtistPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sparta/jukebox/images/jukebox_logo.png")));
        playlistTxtArea.setText("");
        
        
    }//GEN-LAST:event_clearPlaylistBtnActionPerformed

    private void savePlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePlaylistActionPerformed
        //Save playlist button handler
        
        String playlistToSave = playlistTxtArea.getText();
        if(playlistToSave.isEmpty()){
            JOptionPane.showMessageDialog(null, "Cannot Save an empty playlist", "Empty list", JOptionPane.ERROR_MESSAGE);
        } else {
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                // Write the text to the file
                FileWriter writer = new FileWriter(file);
                writer.write(playlistToSave);
                writer.close();
                JOptionPane.showMessageDialog(this, "Playlist saved to file successfully!");
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving Playlist to file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        }
        // Prompt the user to choose a file to save to
        
        
    }//GEN-LAST:event_savePlaylistActionPerformed

    private void playPlaylist1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPlaylist1ActionPerformed
        // TODO add your handling code here:
        String playlistToPlay = playlistTxtArea.getText();
        if(playlistToPlay.isEmpty()){
            JOptionPane.showMessageDialog(null, "Playlist is empty!", "No playlist list", JOptionPane.ERROR_MESSAGE);
        } else {
            // Display the file content in a dialog box
            JOptionPane.showMessageDialog(null, playlistToPlay.toString(), "Now playing the following tracks", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_playPlaylist1ActionPerformed

    private void playPlaylist2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPlaylist2ActionPerformed
        // TODO add your handling code here:
        // Choose the playlist file to read
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(null);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // Read the file and store its playlistFromFile in a StringBuilder
            StringBuilder playlistFromFile = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    playlistFromFile.append(line).append("\n");
                }
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Display the file playlistFromFile in a dialog box
            //JOptionPane.showMessageDialog(null, playlistFromFile.toString(), "File Content", JOptionPane.INFORMATION_MESSAGE);
            playlistTxtArea.setText(playlistFromFile.toString());
        }     
        
    }//GEN-LAST:event_playPlaylist2ActionPerformed

    private void removeSelectedTrackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedTrackBtnActionPerformed
        // TODO add your handling code here:
        selectedTrackTxtArea.setText("");
        
    }//GEN-LAST:event_removeSelectedTrackBtnActionPerformed

    private String displayStars(int rating) {
          String stars = "";
          for (int i = 0; i < rating; ++i) {
              stars += "*";
          }
          return stars;
      }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ArtistPhoto;
    private javax.swing.JButton addTrackToPlaylist;
    private java.awt.TextArea allTracksTextArea;
    private javax.swing.JButton checkTrackBtn;
    private javax.swing.JButton clearPlaylistBtn;
    private javax.swing.JButton exitPlaylistBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton playPlaylist1;
    private javax.swing.JButton playPlaylist2;
    private java.awt.TextArea playlistTxtArea;
    private javax.swing.JButton removeSelectedTrackBtn;
    private javax.swing.JButton savePlaylist;
    private java.awt.TextArea selectedTrackTxtArea;
    private java.awt.TextField trackNoTxtFld;
    // End of variables declaration//GEN-END:variables
}
